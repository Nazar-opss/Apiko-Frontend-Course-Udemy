Дано:
Результат виконання практичної “Fetch data from moviedb, render list of popular films, style it” та раутер з лекції по History API.

Потрібно:

По аналогії з відео по History API використовувати ecmascript модулі, створити папку pages, в якій створити файли popular, movie.

Використовуючи раутер по аналогії з лекцією, додати раут для popular, який буде рутовим (/)

Додати раут для movie

До кожного елементу в списку додати data-атрибут movie_id

По кліку на елемент в списку популярних (фільм) робити навігацію на movies/:movie_id, де :movie_id – ідентифікатор фільму з об’єкту, який присилає сервер (дата-атрибут)

Реалізувати fetchMovieDetails метод в API

Рендерити сторінку Movie, де на основі ідентифікатора буде звертання до сервера, показувати постер, назву, рейтинг, опис, перелік жанрів

Що має получитись:
Ми реалізовуємо багатосторінковість. Після кліку на фільм в списку — відбувається перехід без перезавантаження сторінки (важливо). Замінюється лиш контент сторінки. Показуємо користувачеві сторінку з фільмом. По кліку назад або якщо відбувся перехід на / – має відобразитись список популярних.

Документація:
https://developers.themoviedb.org/3/movies/get-movie-details - отримання інформації по фільму на основі його movie_id.

Заготовлений код:

; const routes = [];
 
; class Router {
;   constructor(routes) {
;     this._routes = routes;
 
;     window.history.pushState = (data, title, ulr) => {
;       History.prototype.pushState.apply(window.history, [data, title, ulr]);
;       this.reroute();
;     }
 
;     window.onpopstate = () => {
;       this.reroute();
;     }
;   }
 
;   reroute() {
;     const matchedRoute = this._routes.find(route => {
;       const matched = route.match(window.location.pathname)
 
;       return matched;
;     })
 
;     matchedRoute.renderRoute();
;   }
; }
 
; const router = new Router(routes);
 
; router.reroute();